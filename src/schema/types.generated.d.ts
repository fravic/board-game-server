/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as context from "../context"
import { Game } from "../api/game"
import { Node } from "../api/node"
import { Player } from "../api/player"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Game: Game;
  GameEvent: { // root type
    changedNodes: NexusGenRootTypes['Node'][]; // [Node!]!
  }
  Mutation: {};
  Player: Player;
  Query: {};
  Subscription: {};
  Node: Node;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Game: { // field return type
    id: string; // ID!
    name: string; // String!
    numPlayers: number; // Int!
    players: NexusGenRootTypes['Player'][]; // [Player!]!
  }
  GameEvent: { // field return type
    changedNodes: NexusGenRootTypes['Node'][]; // [Node!]!
  }
  Mutation: { // field return type
    addPlayerToGame: NexusGenRootTypes['Game']; // Game!
    createGame: NexusGenRootTypes['Game']; // Game!
    startGame: NexusGenRootTypes['Game']; // Game!
  }
  Player: { // field return type
    name: string; // String!
  }
  Query: { // field return type
    game: NexusGenRootTypes['Game']; // Game!
  }
  Subscription: { // field return type
    gameEvents: NexusGenRootTypes['GameEvent']; // GameEvent!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addPlayerToGame: { // args
      gameId: string; // ID!
      name: string; // String!
    }
    createGame: { // args
      name?: string | null; // String
      numPlayers: number; // Int!
    }
    startGame: { // args
      gameId: string; // ID!
    }
  }
  Query: {
    game: { // args
      id: string; // ID!
    }
  }
  Subscription: {
    gameEvents: { // args
      gameId: string; // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Node: "Game"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Game" | "GameEvent" | "Mutation" | "Player" | "Query" | "Subscription";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = "Node";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}
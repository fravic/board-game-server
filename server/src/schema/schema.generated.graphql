### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum ActionType {
  DropPiece
  Heartbeat
  PlayerJoin
  ResetBoard
}

type Board implements GameObject {
  columns: [BoardColumn!]!
  gameId: ID!
  key: String!

  """If set, the id of the player who has won the game."""
  winningPlayerNum: Int
}

type BoardColumn {
  pieces: [BoardPiece!]!
}

type BoardPiece {
  """The player who owns this piece, or null if the piece is not owned"""
  playerNum: Int
}

type ExpectedAction {
  actorId: String
  type: ActionType
}

type Game implements GameObject {
  board: Board!
  expectedActions: [ExpectedAction!]!
  gameId: ID!
  key: String!
  name: String!
  numPlayers: Int!
  players: [Player!]!
}

type GameAndPlayer {
  game: Game!
  player: Player!
}

type GameEvent {
  changed: [GameObject!]!
}

interface GameObject {
  gameId: ID!
  key: String!
}

type Mutation {
  createGame(name: String): Game!
  dropPiece(column: Int!, gameId: ID!, playerNum: Int!): Board!
  heartbeat(gameId: ID!, playerNum: Int): Game!

  """Creates a new player and adds the player to a game."""
  joinGameAsPlayer(gameId: ID!, name: String!): GameAndPlayer!
  resetBoard(gameId: ID!): Board!
}

type Player implements GameObject {
  colorHex: String!
  gameId: ID!
  isConnected: Boolean!
  key: String!
  name: String!
  playerNum: Int!
}

type Query {
  game(id: ID!): Game!
}

type Subscription {
  gameEvents(gameId: ID!): GameEvent!
}

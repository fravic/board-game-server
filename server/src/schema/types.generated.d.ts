/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as context from "../context"
import { Board } from "../api/board"
import { Game } from "../api/game"
import { GameObject } from "../api/game_object"
import { Player } from "../api/player"
import { ExpectedActions, ExpectedAction } from "../api/action"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ActionType: "DropPiece" | "Heartbeat" | "PlayerJoin" | "ResetBoard"
}

export interface NexusGenRootTypes {
  Board: Board;
  BoardColumn: { // root type
    pieces: NexusGenRootTypes['BoardPiece'][]; // [BoardPiece!]!
  }
  BoardPiece: { // root type
    playerNum?: number | null; // Int
  }
  CreateGamePayload: { // root type
    game: NexusGenRootTypes['Game']; // Game!
    roomCode: string; // String!
  }
  ExpectedAction: ExpectedAction;
  ExpectedActions: ExpectedActions;
  Game: Game;
  GameAndPlayer: { // root type
    game: NexusGenRootTypes['Game']; // Game!
    player: NexusGenRootTypes['Player']; // Player!
  }
  GameEvent: { // root type
    changed: NexusGenRootTypes['GameObject'][]; // [GameObject!]!
  }
  Mutation: {};
  Player: Player;
  Query: {};
  RoomCode: { // root type
    code: string; // String!
    gameId: string; // String!
  }
  Subscription: {};
  GameObject: GameObject;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ActionType: NexusGenEnums['ActionType'];
}

export interface NexusGenFieldTypes {
  Board: { // field return type
    columns: NexusGenRootTypes['BoardColumn'][]; // [BoardColumn!]!
    gameId: string; // ID!
    key: string; // String!
    lastPlayedColumn: number | null; // Int
    winningPlayerNum: number | null; // Int
  }
  BoardColumn: { // field return type
    pieces: NexusGenRootTypes['BoardPiece'][]; // [BoardPiece!]!
  }
  BoardPiece: { // field return type
    playerNum: number | null; // Int
  }
  CreateGamePayload: { // field return type
    game: NexusGenRootTypes['Game']; // Game!
    roomCode: string; // String!
  }
  ExpectedAction: { // field return type
    actorPlayerNum: number | null; // Int
    type: NexusGenEnums['ActionType'] | null; // ActionType
  }
  ExpectedActions: { // field return type
    actions: NexusGenRootTypes['ExpectedAction'][]; // [ExpectedAction!]!
    gameId: string; // ID!
    key: string; // String!
  }
  Game: { // field return type
    board: NexusGenRootTypes['Board']; // Board!
    expectedActions: NexusGenRootTypes['ExpectedActions']; // ExpectedActions!
    gameId: string; // ID!
    key: string; // String!
    name: string; // String!
    numPlayers: number; // Int!
    players: NexusGenRootTypes['Player'][]; // [Player!]!
  }
  GameAndPlayer: { // field return type
    game: NexusGenRootTypes['Game']; // Game!
    player: NexusGenRootTypes['Player']; // Player!
  }
  GameEvent: { // field return type
    changed: NexusGenRootTypes['GameObject'][]; // [GameObject!]!
  }
  Mutation: { // field return type
    createGame: NexusGenRootTypes['CreateGamePayload']; // CreateGamePayload!
    dropPiece: NexusGenRootTypes['Board']; // Board!
    heartbeat: NexusGenRootTypes['Game']; // Game!
    joinGameAsPlayer: NexusGenRootTypes['GameAndPlayer']; // GameAndPlayer!
    resetBoard: NexusGenRootTypes['Board']; // Board!
  }
  Player: { // field return type
    colorHex: string; // String!
    gameId: string; // ID!
    isConnected: boolean; // Boolean!
    key: string; // String!
    name: string; // String!
    playerNum: number; // Int!
  }
  Query: { // field return type
    game: NexusGenRootTypes['Game']; // Game!
    roomCode: NexusGenRootTypes['RoomCode']; // RoomCode!
  }
  RoomCode: { // field return type
    code: string; // String!
    gameId: string; // String!
  }
  Subscription: { // field return type
    gameEvents: NexusGenRootTypes['GameEvent']; // GameEvent!
  }
  GameObject: { // field return type
    gameId: string; // ID!
    key: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createGame: { // args
      name?: string | null; // String
    }
    dropPiece: { // args
      column: number; // Int!
      gameId: string; // ID!
      playerNum: number; // Int!
    }
    heartbeat: { // args
      gameId: string; // ID!
      playerNum?: number | null; // Int
    }
    joinGameAsPlayer: { // args
      gameId: string; // ID!
      name: string; // String!
    }
    resetBoard: { // args
      gameId: string; // ID!
    }
  }
  Query: {
    game: { // args
      id: string; // ID!
    }
    roomCode: { // args
      code: string; // String!
    }
  }
  Subscription: {
    gameEvents: { // args
      gameId: string; // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  GameObject: "Game" | "Board" | "ExpectedActions" | "Player"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Board" | "BoardColumn" | "BoardPiece" | "CreateGamePayload" | "ExpectedAction" | "ExpectedActions" | "Game" | "GameAndPlayer" | "GameEvent" | "Mutation" | "Player" | "Query" | "RoomCode" | "Subscription";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "ActionType";

export type NexusGenInterfaceNames = "GameObject";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}